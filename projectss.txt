#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_MENU_ITEMS 100
#define MAX_CUSTOMERS 100
#define MAX_ORDERS 10
#define MAX_NAME_LEN 50
#define MAX_COUNTERS 3

// Define the structure for Menu Item

typedef struct {
    int id;
    char name[MAX_NAME_LEN];
    char category[MAX_NAME_LEN];
    double price;
} MenuItem;

typedef struct MenuItemNode {
    MenuItem item;
    struct MenuItemNode *left;
    struct MenuItemNode *right;
} MenuItemNode;
MenuItemNode *menuBSTRoot = NULL;


typedef struct {
    int id;
    char name[MAX_NAME_LEN];
    MenuItem orders[MAX_ORDERS];
    int quantities[MAX_ORDERS];
    int order_count;
    double total_order_value;
} Customer;

typedef struct Node {
    Customer data;
    struct Node *next;
} Node;



typedef struct {
    Node *front;
    Node *rear;
    int size;
} CustomerQueue;





// Queue for customer management (FIFO)

// Admin structure to manage admin-related operations
typedef struct {
    char password[MAX_NAME_LEN];  // Simple password authentication
} Admin;

// Menu Management
typedef struct {
    MenuItem items[MAX_MENU_ITEMS];
    int size;
} Menu;

// Counter Management
typedef struct {
    CustomerQueue counters[MAX_COUNTERS];
    int numCounters;
} CounterManager;


#define MAX_CATEGORIES 20  // Max number of categories

typedef struct {
    char list[MAX_CATEGORIES][MAX_NAME_LEN];
    int size;
} Category;

// Queue Operations
void initQueue(CustomerQueue *q);
int isQueueEmpty(CustomerQueue *q);
int isQueueFull(CustomerQueue *q);
void enqueue(CustomerQueue *q, Customer *cust);
Customer dequeue(CustomerQueue *q);
Customer peek(CustomerQueue *q);



// Menu Functions
void addMenuItem(Menu *menu, Category *categoryList, const char *name, const char *category, double price);
void showMenuByCategorySorted(MenuItemNode *root, const char *category);
void deleteMenuItem(Menu *menu, int id);
void showMenu(Menu *menu);
void showMenuByCategory(Menu *menu, const char *category);
void showCategories(Menu *menu);
void assignIDsInOrder(MenuItemNode *root, int *currentID);

// Counter Manager Functions
void initCounters(CounterManager *cm);
int getShortestQueueCounter(CounterManager *cm);
void addCustomerToCounter(CounterManager *cm, Customer *customer);
void serveCustomer(CounterManager *cm, int counterId);
void listCounters(CounterManager *cm);

// Admin Functions
int authenticateAdmin(Admin *admin);
void showAdminMenu(Menu *menu, Admin *admin);
MenuItemNode* insertMenuItemByPrice(MenuItemNode *root, MenuItem item);

// Main Program Logic
int main() {
    // Initialize structures
    CounterManager counterManager;
    Menu menu;
    Admin admin;

    Category categoryList;
    categoryList.size = 0;



    initCounters(&counterManager);
    menu.size = 0;
strcpy(admin.password, "admin123");  // Set default admin password
addMenuItem(&menu, &categoryList, "Pizza", "Main Course", 8.99);
addMenuItem(&menu, &categoryList, "Burger", "Main Course", 4.99);
addMenuItem(&menu, &categoryList, "Fries", "Side Dish", 2.99);
addMenuItem(&menu, &categoryList, "Soda", "Soft Drink", 1.49);
addMenuItem(&menu, &categoryList, "Chocolate Cake", "Dessert", 3.99);


int idCounter = 1;
assignIDsInOrder(menuBSTRoot, &idCounter);



    int choice;
    do {
        printf("\n--- Food Order Management ---\n");
        printf("1. View Menu\n2. Place Order\n3. Serve Customer\n4. Admin Panel\n5. View Counter Status\n6. Exit\nChoice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: {
    printf("\n--- Categories ---\n");
    for (int i = 0; i < categoryList.size; i++) {
        printf("%d. %s\n", i + 1, categoryList.list[i]);
    }

    int categoryChoice;
    printf("Select a category to view items: ");
    scanf("%d", &categoryChoice);

    if (categoryChoice >= 1 && categoryChoice <= categoryList.size) {
        showMenuByCategorySorted(menuBSTRoot, categoryList.list[categoryChoice - 1]);

    } else {
        printf("Invalid category selection.\n");
    }
    break;
}


            case 2:  {
    // Place an order
    Customer new_customer;
    new_customer.id = counterManager.counters[0].size + 1;  // Temporary ID
    new_customer.order_count = 0;
    new_customer.total_order_value = 0;

    // Ordering process
    char more = 'y';
    while ((more == 'y' || more == 'Y') && new_customer.order_count < MAX_ORDERS) {
        // Show categories
        printf("\n--- Categories ---\n");
        for (int i = 0; i < categoryList.size; i++) {
            printf("%d. %s\n", i + 1, categoryList.list[i]);
        }

        int categoryChoice;
        printf("Select a category: ");
        scanf("%d", &categoryChoice);

        if (categoryChoice < 1 || categoryChoice > categoryList.size) {
            printf("Invalid category selection.\n");
            break;
        }

        const char *selectedCategory = categoryList.list[categoryChoice - 1];
        showMenuByCategory(&menu, selectedCategory);

        int item_id, qty;
        printf("Enter item ID: ");
        scanf("%d", &item_id);

        int found = 0;
        for (int i = 0; i < menu.size; i++) {
            if (menu.items[i].id == item_id && strcmp(menu.items[i].category, selectedCategory) == 0) {
                printf("Enter quantity: ");
                scanf("%d", &qty);
                new_customer.orders[new_customer.order_count] = menu.items[i];
                new_customer.quantities[new_customer.order_count] = qty;
                new_customer.total_order_value += menu.items[i].price * qty;
                new_customer.order_count++;
                found = 1;
                break;
            }
        }

        if (!found) {
            printf("Item not found in selected category!\n");
        }

        if (new_customer.order_count >= MAX_ORDERS) {
            printf("Reached max number of items per order.\n");
            break;
        }

        printf("Add more items? (y/n): ");
        getchar();  // clear buffer
        scanf("%c", &more);
    }

    // Now ask for name at the end
    printf("Enter customer name: ");
    getchar();  // clear newline
    fgets(new_customer.name, MAX_NAME_LEN, stdin);
    new_customer.name[strcspn(new_customer.name, "\n")] = 0;

    // Assign ID based on queue
    new_customer.id = counterManager.counters[0].size + 1;

    addCustomerToCounter(&counterManager, &new_customer);
    printf("Customer %s has been added to the queue.\n", new_customer.name);
    break;
}

            case 3:
                // Serve customer at the selected counter
                {
                    int counterId;
                    printf("Enter counter ID to serve: ");
                    scanf("%d", &counterId);
                    serveCustomer(&counterManager, counterId);
                }
                break;
            case 4:
                // Admin Panel
                showAdminMenu(&menu, &admin);
                break;
            case 5:
                listCounters(&counterManager);
                break;
            case 6:
                printf("Exiting system. Goodbye!\n");
                break;
            default:
                printf("Invalid choice.\n");
        }
    } while (choice != 6);

    return 0;
}

void initQueue(CustomerQueue *q) {
    q->front = q->rear = NULL;
    q->size = 0;
}

int isQueueEmpty(CustomerQueue *q) {
    return q->size == 0;
}

int isQueueFull(CustomerQueue *q) {
    return q->size == MAX_CUSTOMERS;
}

void enqueue(CustomerQueue *q, Customer *cust) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation failed.\n");
        return;
    }

    newNode->data = *cust;
    newNode->next = NULL;

    if (isQueueEmpty(q)) {
        q->front = q->rear = newNode;
    } else {
        q->rear->next = newNode;
        q->rear = newNode;
    }
    q->size++;
}

Customer dequeue(CustomerQueue *q) {
    Customer empty = {0};
    if (isQueueEmpty(q)) {
        printf("Queue is empty.\n");
        return empty;
    }

    Node *temp = q->front;
    Customer cust = temp->data;

    q->front = q->front->next;
    if (q->front == NULL) q->rear = NULL;

    free(temp);
    q->size--;
    return cust;
}

Customer peek(CustomerQueue *q) {
    Customer empty = {0};
    if (isQueueEmpty(q)) {
        printf("Queue is empty.\n");
        return empty;
    }
    return q->front->data;
}


// === Menu Functions ===
void addMenuItem(Menu *menu, Category *categoryList, const char *name, const char *category, double price) {
    if (menu->size >= MAX_MENU_ITEMS) {
        printf("Menu is full, cannot add more items.\n");
        return;
    }

    MenuItem new_item;
     new_item.id = -1;
    strncpy(new_item.name, name, MAX_NAME_LEN);
    strncpy(new_item.category, category, MAX_NAME_LEN);
    new_item.price = price;

    menu->items[menu->size] = new_item;
    menu->size++;
    menuBSTRoot = insertMenuItemByPrice(menuBSTRoot, new_item);
    printf("");

    // Add to categoryList if it's a new category
    int found = 0;
    for (int i = 0; i < categoryList->size; i++) {
        if (strcmp(categoryList->list[i], category) == 0) {
            found = 1;
            break;
        }
    }

    if (!found && categoryList->size < MAX_CATEGORIES) {
        strcpy(categoryList->list[categoryList->size], category);
        categoryList->size++;
    }
}


void deleteMenuItem(Menu *menu, int id) {
    int found = 0;
    for (int i = 0; i < menu->size; i++) {
        if (menu->items[i].id == id) {
            found = 1;
            for (int j = i; j < menu->size - 1; j++) {
                menu->items[j] = menu->items[j + 1];
            }
            menu->size--;
            printf("Menu item with ID %d deleted.\n", id);
            break;
        }
    }

    if (!found) {
        printf("Item not found with ID %d.\n", id);
    }
}

void showMenu(Menu *menu) {
    printf("\n--- Menu ---\n");
    for (int i = 0; i < menu->size; i++) {
        printf("ID: %d, Name: %s, Category: %s, Price: $%.2f\n", menu->items[i].id, menu->items[i].name, menu->items[i].category, menu->items[i].price);
    }
}

void showMenuByCategory(Menu *menu, const char *category) {
    printf("\n--- %s Menu ---\n", category);
    for (int i = 0; i < menu->size; i++) {
        if (strcmp(menu->items[i].category, category) == 0) {
            printf("ID: %d, Name: %s, Price: $%.2f\n", menu->items[i].id, menu->items[i].name, menu->items[i].price);
        }
    }
}

void showCategories(Menu *menu) {
    printf("\n--- Categories ---\n");
    int count = 1;
    char categories[MAX_MENU_ITEMS][MAX_NAME_LEN];
    for (int i = 0; i < menu->size; i++) {
        int found = 0;
        for (int j = 0; j < count; j++) {
            if (strcmp(categories[j], menu->items[i].category) == 0) {
                found = 1;
                break;
            }
        }
        if (!found) {
            strcpy(categories[count - 1], menu->items[i].category);
            printf("%d. %s\n", count, categories[count - 1]);
            count++;
        }
    }
}

// === Counter Management ===
void initCounters(CounterManager *cm) {
    cm->numCounters = MAX_COUNTERS;
    for (int i = 0; i < cm->numCounters; i++) {
        initQueue(&cm->counters[i]);
    }
}

int getShortestQueueCounter(CounterManager *cm) {
    int minQueueSize = MAX_CUSTOMERS;
    int counterId = 0;
    for (int i = 0; i < cm->numCounters; i++) {
        if (cm->counters[i].size < minQueueSize) {
            minQueueSize = cm->counters[i].size;
            counterId = i;
        }
    }
    return counterId;
}

void addCustomerToCounter(CounterManager *cm, Customer *customer) {
    int counterId = getShortestQueueCounter(cm);
    enqueue(&cm->counters[counterId], customer);
}

void serveCustomer(CounterManager *cm, int counterId) {
    if (isQueueEmpty(&cm->counters[counterId])) {
        printf("No customers in the queue for Counter %d.\n", counterId);
        return;
    }

    Customer customer = dequeue(&cm->counters[counterId]);
    printf("Serving customer %s (ID: %d)\n", customer.name, customer.id);
    printf("Items Ordered:\n");
    for (int i = 0; i < customer.order_count; i++) {
        printf("Item: %s, Quantity: %d, Total: $%.2f\n", customer.orders[i].name, customer.quantities[i], customer.orders[i].price * customer.quantities[i]);
    }
    printf("Total Bill: $%.2f\n", customer.total_order_value);
}

void listCounters(CounterManager *cm) {
    printf("\n--- Counter Status ---\n");
    for (int i = 0; i < cm->numCounters; i++) {
        printf("Counter %d: %d customer(s)\n", i, cm->counters[i].size);
    }
}

void showMenuByCategorySorted(MenuItemNode *root, const char *category) {
    if (!root) return;
    showMenuByCategorySorted(root->left, category);
    if (strcmp(root->item.category, category) == 0) {
        printf(" %d.  %s,  $%.2f\n", root->item.id, root->item.name, root->item.price);
    }
    showMenuByCategorySorted(root->right, category);
}

MenuItemNode* insertMenuItemByPrice(MenuItemNode *root, MenuItem item) {
    if (root == NULL) {
        MenuItemNode *newNode = (MenuItemNode *)malloc(sizeof(MenuItemNode));
        newNode->item = item;
        newNode->left = newNode->right = NULL;
        return newNode;
    }

    if (item.price < root->item.price)
        root->left = insertMenuItemByPrice(root->left, item);
    else
        root->right = insertMenuItemByPrice(root->right, item);

    return root;
}

void showMenuSorted(MenuItemNode *root) {
    if (root == NULL) return;
    showMenuSorted(root->left);
    printf("ID: %d, Name: %s, Category: %s, Price: $%.2f\n",
           root->item.id, root->item.name, root->item.category, root->item.price);
    showMenuSorted(root->right);
}

void assignIDsInOrder(MenuItemNode *root, int *currentID) {
    if (!root) return;
    assignIDsInOrder(root->left, currentID);
    root->item.id = (*currentID)++;
    assignIDsInOrder(root->right, currentID);
}






// === Admin Panel ===
int authenticateAdmin(Admin *admin) {
    char input[MAX_NAME_LEN];
    printf("Enter admin password: ");
    scanf("%s", input);
    return strcmp(input, admin->password) == 0;
}

void showAdminMenu(Menu *menu, Admin *admin) {
    int choice;
    do {
        printf("\n--- Admin Panel ---\n");
        printf("1. Add Menu Item\n2. Delete Menu Item\n3. View Menu\n4. Exit Admin Panel\nChoice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: {
                char name[MAX_NAME_LEN], category[MAX_NAME_LEN];
                double price;
                printf("Enter item name: ");
                getchar();  // to clear the buffer
                fgets(name, MAX_NAME_LEN, stdin);
                name[strcspn(name, "\n")] = 0;

                printf("Enter item category: ");
                fgets(category, MAX_NAME_LEN, stdin);
                category[strcspn(category, "\n")] = 0;

                printf("Enter item price: ");
                scanf("%lf", &price);

                void addMenuItem(Menu *menu, Category *categoryList, const char *name, const char *category, double price);
                break;
            }
            case 2: {
                int id;
                printf("Enter item ID to delete: ");
                scanf("%d", &id);
                deleteMenuItem(menu, id);
                break;
            }
            case 3:
                showMenu(menu);
                break;
            case 4:
                break;
            default:
                printf("Invalid choice.\n");
        }
    } while (choice != 4);
}